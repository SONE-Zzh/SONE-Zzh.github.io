<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sone-Zzh</title>
  
  <subtitle>sone-zzh.github.io</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-20T08:21:45.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe - Zzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2019/06/20/git/"/>
    <id>http://yoursite.com/2019/06/20/git/</id>
    <published>2019-06-20T08:21:45.000Z</published>
    <updated>2019-06-20T08:21:45.320Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mobileAdaptive</title>
    <link href="http://yoursite.com/2019/06/20/mobileAdaptive/"/>
    <id>http://yoursite.com/2019/06/20/mobileAdaptive/</id>
    <published>2019-06-20T06:57:03.000Z</published>
    <updated>2019-06-20T09:30:26.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口 viewport"></a>视口 viewport</h3><p>meta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。</p><p>通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。</p><p>在苹果的规范中，meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：</p><table><thead><tr><th>width</th><th>设置<strong>*layout viewport*</strong>  的宽度，为一个正整数，或字符串”width-device”</th></tr></thead><tbody><tr><td>initial-scale</td><td>设置页面的初始缩放值，为一个数字，可以带小数</td></tr><tr><td>minimum-scale</td><td>允许用户的最小缩放值，为一个数字，可以带小数</td></tr><tr><td>maximum-scale</td><td>允许用户的最大缩放值，为一个数字，可以带小数</td></tr><tr><td>height</td><td>设置layout viewport  的高度，这个属性对我们并不重要，很少使用</td></tr><tr><td>user-scalable</td><td>是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</td></tr></tbody></table><p>这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。</p><p>JavaScript大神Peter-Paul Koch(彼得-保罗 科赫) 将viewport分为了三个概念：</p><ul><li><code>visual viewport</code> 可见视口：屏幕宽度（window. innerWidth/Height）</li><li><code>layout viewport</code> 布局视口： DOM宽度（document. documentElement. clientWidth/Height）</li><li><code>ideal viewport</code> 理想适口：使布局视口就是可见视口（(visual viewport) = (layout viewport) * scale)</li></ul><p><strong>设置理想视口：</strong>把默认的layout viewport的宽度设为移动设备的屏幕宽度，得到理想视口<code>(ideal viewport)</code>:</p><p>通过width=device-width，所有浏览器都能把当前的viewport宽度变成ideal viewport的宽度，但要注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。</p><p>initial-scale=1 也能把当前的viewport宽度变成 ideal viewport 的宽度，但这次轮到了windows phone 上的IE 无论是竖屏还是横屏都把宽度设为竖屏时ideal viewport的宽度。</p><p>但如果width 和 initial-scale=1同时出现，并且还出现了冲突呢，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=400, initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><p>width=400表示把当前viewport的宽度设为400px，initial-scale=1则表示把当前viewport的宽度设为ideal viewport的宽度，那么浏览器到底该服从哪个命令呢？是书写顺序在后面的那个吗？不是。当遇到这种情况时，浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。</p><p>最后，最完美的写法应该是，两者都写上去，这样就 initial-scale=1 解决了 iphone、ipad的毛病，width=device-width则解决了IE的毛病：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="像素-（Pixel）"><a href="#像素-（Pixel）" class="headerlink" title="像素 （Pixel）"></a>像素 （Pixel）</h3><p> 在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。</p><p>在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。其他品牌的移动设备也是这个道理。</p><p> 还有一个因素也会引起css中px的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。</p><h3 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h3><p>物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。所谓的一倍屏、二倍屏(Retina)、三倍屏，指的是设备以多少物理像素来显示一个CSS像素，也就是说，多倍屏以更多更精细的物理像素点来显示一个CSS像素点，在普通屏幕下1个CSS像素对应1个物理像素，而在Retina屏幕下，1个CSS像素对应的却是4个物理像素。关于这个概念，看一张”田”字示意图就会清晰了。</p><h3 id="CSS像素（device-independent-pixel）"><a href="#CSS像素（device-independent-pixel）" class="headerlink" title="CSS像素（device-independent pixel）"></a>CSS像素（device-independent pixel）</h3><p>CSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs。CSS像素顾名思义就是我们写CSS时所用的像素。</p><h3 id="设备像素比（device-pixel-ratio）"><a href="#设备像素比（device-pixel-ratio）" class="headerlink" title="设备像素比（device pixel ratio）"></a>设备像素比（device pixel ratio）</h3><p>设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p><p>设备像素比 ＝ 物理像素 / 设备独立像素</p><p>在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。通常所说的二倍屏(retina)的dpr是2, 三倍屏是3。</p><p>viewport中的scale和dpr是倒数关系。<br>获取当前设备的dpr：</p><ul><li><code>JavaScript: window.devicePixelRatio</code>。</li><li><code>CSS: -webkit-device-pixel-ratio, -webkit-min-device-pixel-ratio, -webkit-max-device-pixel-ratio</code>。不同dpr的设备，可根据此做一些样式适配(这里只针对webkit内核的浏览器和webview)。</li></ul><h3 id="屏幕像素密度PPI-pixel-per-inch"><a href="#屏幕像素密度PPI-pixel-per-inch" class="headerlink" title="屏幕像素密度PPI(pixel per inch)"></a>屏幕像素密度PPI(pixel per inch)</h3><p>屏幕像素密度是指一个设备表面上存在的像素数量，它通常以每英寸有多少像素来计算(PPI)。屏幕像素密度与屏幕尺寸和屏幕分辨率有关，在单一变化条件下，屏幕尺寸越小、分辨率越高，像素密度越大，反之越小。</p><blockquote><p>屏幕密度 = 对角线分辨率/屏幕尺寸</p></blockquote><h3 id="移动端在像素上会遇到的问题"><a href="#移动端在像素上会遇到的问题" class="headerlink" title="移动端在像素上会遇到的问题"></a>移动端在像素上会遇到的问题</h3><h4 id="dpr问题"><a href="#dpr问题" class="headerlink" title="dpr问题"></a>dpr问题</h4><!--   开启文章资源文件夹功能后，应使用图片标签asset_img来插入图片而不是markdown  直接写文件名称就能获取到 --><img src="/2019/06/20/mobileAdaptive/FpXnQbkqJ8sqP82mmrIjYBxfliQL.jpg" title="retina vs normal"><p>上图中可以看出，对于这样的css样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width: 2px;</span><br><span class="line">height: 2px;</span><br></pre></td></tr></table></figure><p>在不同的屏幕上(普通屏幕 vs retina屏幕)，css像素所呈现的大小(物理尺寸)是一致的，不同的是1个css像素所对应的物理像素个数是不一致的。</p><p>在普通屏幕下，1个css像素 对应 1个物理像素(<code>1:1</code>)。<br>在retina 屏幕下，1个css像素对应 4个物理像素(<code>1:4</code>)。</p><h4 id="高清图片失真问题"><a href="#高清图片失真问题" class="headerlink" title="高清图片失真问题"></a>高清图片失真问题</h4><p>谈到这里，就得说一下，retina下图片的展示情况？</p><p>理论上，1个位图像素对应于1个物理像素，图片才能得到完美清晰的展示。</p><p>在普通屏幕下是没有问题的，但是在retina屏幕下就会出现位图像素点不够，从而导致图片模糊的情况。</p><p>用一张图来表示：</p><img src="/2019/06/20/mobileAdaptive/Fuex59zSiV9pbaJG-s9wg_UpCERP.jpg" title="retina image blurry"><p>如上图：对于dpr=2的retina屏幕而言，1个位图像素对应于4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊(注意上述的几个颜色值)。</p><p>所以，对于图片高清问题，比较好的方案就是<code>两倍图片</code>(@2x)。</p><p>如：200×300(css pixel)img标签，就需要提供400×600的图片。</p><p>如此一来，位图像素点个数就是原来的<code>4</code>倍，在retina屏幕下，<code>位图像素点个数</code>就可以跟<code>物理像素点个数</code>形成 <code>1 : 1</code>的比例，图片自然就清晰了(这也解释了之前留下的一个问题，为啥视觉稿的画布大小要<code>×2</code>？)。</p><p>这里就还有另一个问题，如果普通屏幕下，也用了<code>两倍图片</code>，会怎样呢？</p><p>很明显，在普通屏幕下，200×300(css pixel)img标签，所对应的物理像素个数就是<code>200×300</code>个，而<code>两倍图片</code>的位图像素个数则是<code>200×300*4</code>，所以就出现一个物理像素点对应4个位图像素点，所以它的取色也只能通过一定的算法(显示结果就是一张只有原图像素总数四分之一，我们称这个过程叫做<code>downsampling</code>)，肉眼看上去虽然图片不会模糊，但是会觉得图片缺少一些锐利度，或者是有点色差(但还是可以接受的)。</p><p>用一张图片来表示：</p><img src="/2019/06/20/mobileAdaptive/FsYhT3m0Zq3ce-HLBOOlQfY9W2DD.jpg" title="enter image description here"><p>DPI(dots per inch)为打印机每英寸可以喷的墨汁点数，用于印刷行业中度量空间点的密度<br>PPI(pixels per inch)为屏幕每英寸的像素数量(即在一个对角线长度为1英寸的正方形内所拥有的像素数)，用于度量计算机显示屏上像素的密度<br>目前PPI(主要是iOS)和DPI(比如在Android中)都会用在计算机显示设备的参数描述中，并且二者的意思是一样的，都是代表像素密度</p><img src="/2019/06/20/mobileAdaptive/12617-20160825102300792-1233880647.png" title="原创移动端高清、多屏适配方案"><p>demo中，100×100的图片，分别放在100×100，50×50，25×25的img容器中，在retina屏幕下的显示效果。</p><p><code>条形图</code>，通过放大镜其实可以看出边界像素点取值的不同：</p><ul><li>图1，就近取色，色值介于红白之间，偏淡，图片看上去会模糊(可以理解为图片拉伸)。</li><li>图2，没有就近取色，色值要么是红，要么是白，图片看上去很清晰。</li><li>图3，就近取色，色值介于红白之间，偏重，图片看上去有色差，缺少锐利度(可以理解为图片挤压)。</li></ul><p><code>爱字图</code>，可以通过看文字”爱”来区分图片模糊还是清晰。</p><h4 id="1px边框问题"><a href="#1px边框问题" class="headerlink" title="1px边框问题"></a>1px边框问题</h4><h5 id="retina下，border-1px问题"><a href="#retina下，border-1px问题" class="headerlink" title="retina下，border: 1px问题"></a>retina下，border: 1px问题</h5><p>这大概是设计师最敏感，最关心的问题了。</p><p>首先得说一下，为什么存在retina下，border: 1px这一说？</p><p>我们正常的写css，像这样<code>border: 1px;</code>，在retina屏幕下，会有什么问题吗？</p><p>设计师为何觉得<code>高清屏</code>下(右图)这个线条<code>粗</code>呢？明明和左右一样的~</p><p>还是通过一张图来解释(原谅我再次盗图)：</p><p>上图中，对于一条<code>1px</code>宽的直线，它们在屏幕上的物理尺寸(灰色区域)的确是相同的，不同的其实是屏幕上最小的物理显示单元，即物理像素，所以对于一条直线，iphone5它能显示的最小宽度其实是图中的红线圈出来的灰色区域，用css来表示，理论上说是<code>0.5px</code>。</p><p><strong>所以，设计师想要的retina下border: 1px;，其实就是1物理像素宽，对于css而言，可以认为是border: 0.5px;，这是retina下(dpr=2)下能显示的最小单位。</strong></p><p>然而，无奈并不是所有手机浏览器都能识别<code>border: 0.5px;</code>，ios7以下，android等其他系统里，0.5px会被当成为0px处理，那么如何实现这<code>0.5px</code>呢？</p><p>最简单的一个做法就是这样(<code>元素scale</code>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.scale&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.scale:after&#123;</span><br><span class="line">    content:&quot;&quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom:0px;</span><br><span class="line">    left:0px;</span><br><span class="line">    right:0px;</span><br><span class="line">    border-bottom:1px solid #ddd;</span><br><span class="line">    -webkit-transform:scaleY(.5);</span><br><span class="line">    -webkit-transform-origin:0 0;</span><br><span class="line">&#125;123456789101112131415</span><br></pre></td></tr></table></figure><p>我们照常写<code>border-bottom: 1px solid #ddd;</code>，然后通过<code>transform: scaleY(.5)</code>缩小0.5倍来达到<code>0.5px</code>的效果，但是这样hack实在是不够通用(如：圆角等)，写起来也麻烦。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><img src="/2019/06/20/mobileAdaptive/19.jpg" title="keycode"><p>如果是之前，我是这样的做法：</p><blockquote><p>不断写媒体查询做兼容，直到PM或者QA满意为止。</p></blockquote><p>这样的方法，存在以下几个问题：</p><ol><li>难以适应所有的手机屏幕尺寸，总是会有不兼容的尺寸出现，问题仍然存在，只是尚未被发现。</li><li>太累了，非常折磨人。</li></ol><h3 id="我们要达到的效果"><a href="#我们要达到的效果" class="headerlink" title="我们要达到的效果"></a>我们要达到的效果</h3><ul><li>直接根据UI的标注视觉稿上面的尺寸进行开发。如标注的是<code>230px</code>, 通过函数将其转为<code>rem</code>而不用人工计算。</li><li>在大部分的手机机型上看起来的页面视觉效果都一致。</li></ul><h4 id="与UI的配合"><a href="#与UI的配合" class="headerlink" title="与UI的配合"></a>与UI的配合</h4><p><strong>首先，需要和UI小姐姐说一句话：</strong></p><blockquote><p>“标注元素的时候请按照<code>750px * 1334px</code>为准。”</p></blockquote><p>那么，你将会拿到一张如下的标注图：</p><img src="/2019/06/20/mobileAdaptive/14.jpg" title="img"><h3 id="【核心】动态计算-rem"><a href="#【核心】动态计算-rem" class="headerlink" title="【核心】动态计算+rem"></a>【核心】动态计算+rem</h3><p>到这一步，我们仍然没有解决核心问题：</p><ol><li>要自己去将px换算成rem。（可能旁边会放一个计算器）</li><li>全尺寸适配。</li></ol><p>第一步：假设有三款不同长宽的手机。</p><img src="/2019/06/20/mobileAdaptive/13.jpg" title="img"><p>第二步：把手机的宽分为10份，那么上述三款手机的每份宽度是<strong>35px/36px/37px</strong>。并且将<code>&lt;html&gt;</code>标签添加不同的<code>font-size</code>设置。</p><img src="/2019/06/20/mobileAdaptive/12.jpg" title="img"><p><strong>即：一份分别为35px/36px/37px</strong></p><img src="/2019/06/20/mobileAdaptive/11.jpg" title="img"><p>第三步：根据UI的px标注图计算出相应的rem：</p><img src="/2019/06/20/mobileAdaptive/10.jpg" title="img"><p>第四步：rem将转化成不同的px尺寸在不同的手机上呈现：(ps:图中的除法结果算错了）</p><img src="/2019/06/20/mobileAdaptive/9.jpg" title="img"><p><strong>通过这样的方式，即可以在不同尺寸的手机上有相同的展示效果。而最cool的地方，是上述整个过程时自动适配的。开发者只需根据UI标注图无脑写就行了，再也不用挤眉弄眼地对着Chrome Devtools 疯狂调试了。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>把手机的宽分为10份，那么上述三款手机的每份宽度是<strong>35px/36px/37px</strong>。并且将<code>&lt;html&gt;</code>标签添加不同的<code>font-size</code>设置。</p></blockquote><p>通过JavaScript动态计算出当前的屏幕宽度，切割为10份并将<code>&lt;html&gt;</code>的<code>fontSize</code>设置为<code>1份单位宽度</code>。</p><img src="/2019/06/20/mobileAdaptive/8.jpg" title="key-code"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;DOMContentLoaded&apos;, function(e) &#123;</span><br><span class="line">    document.getElementsByTagName(&apos;html&apos;)[0].style.fontSize = window.innerWidth / 10 + &apos;px&apos;;</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 </p><blockquote><p>根据UI的px标注图计算出相应的rem</p></blockquote><h3 id="绕不开的viewport和dpr"><a href="#绕不开的viewport和dpr" class="headerlink" title="绕不开的viewport和dpr"></a>绕不开的viewport和dpr</h3><p>在写这篇博客的开始，我曾试图绕开阐述<code>viewport</code>和<code>dpr</code>这个抽象的概念，因为上述的内容已经可以从一个维度解决大多数问题了。但是，如果想做得更完美，就必须从另一个维度出发，而这个维度，就是<strong>dpr</strong>。</p><img src="/2019/06/20/mobileAdaptive/6.jpg" title="img"><p><strong>首先，要区分两个概念：</strong></p><ol><li><strong>设备的pixels</strong></li><li><strong>css的pixels</strong></li></ol><p><strong>有这样一个场景</strong></p><p>一位前端工程师敲出了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height:100px;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>那么此时，他的意思是<code>box</code>在我们的屏幕中占的实际长宽是<code>100px</code>,在他脑中是这样的画面：</p><img src="/2019/06/20/mobileAdaptive/5.jpg" title="img"><p>项目上线之后，有一个用户’不怀好意’地使用了放大镜功能将长宽放大了两倍，现在就变成了：</p><img src="/2019/06/20/mobileAdaptive/4.jpg" title="img"><p><strong>你会发现，设备花了200px的长宽来渲染CSS里面定义的100px的长宽，而设备pixels和样式pixels的比值，就是dpr，即Device Pixel Ratio</strong>。</p><img src="/2019/06/20/mobileAdaptive/3.jpg" title="dp"><p>我们大家都知道Retina屏（视网膜屏），之所以看起来这么高清，就是因为苹果设备花两个像素来渲染一个像素的物体，那么看起来肯定更为精致。</p><p>那么，如果我们能够查询出当前设备的<strong>dpr</strong>，并且做相应的缩放就可以解决这个问题。</p><p>举个例子：某些安卓机的<code>dpr=1</code>，但是UI做标注图的时候是根据<code>dpr=2</code>来做的，就像我们上文的<code>750px * 1334px</code>。直接按照<code>750px * 1334px</code>写出来的元素将会被放大两倍，<strong>那么我们就使页面缩小两倍</strong>，如何控制呢？</p><p><strong>用viewport简言之，在这里我们使用viewport是为了控制屏幕的缩放。</strong></p><img src="/2019/06/20/mobileAdaptive/2.jpg" title="viewport"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var dpr = window.devicePixelRatio;</span><br><span class="line">meta.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + 1/dpr + &apos;, maximum-scale=&apos; + 1/dpr + &apos;, minimum-scale=&apos; + 1/dpr + &apos;, user-scalable=no&apos;); </span><br><span class="line">// 帮助理解 如果dpr=2，说明写的100px渲染成了200px，所以需要缩小至1/2，即1/dpr</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>另外值得一提的是，UI一般会以750px * 1334px的标准进行设计，因为这样使得设计稿更加精细。</strong></p><p>这样，我们完成了从<code>dpr</code>维度的适配。</p><h3 id="兼容性代码："><a href="#兼容性代码：" class="headerlink" title="兼容性代码："></a>兼容性代码：</h3><img src="/2019/06/20/mobileAdaptive/1.jpg" title="sourceCode"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var dpr = window.devicePixelRatio;</span><br><span class="line">  var meta = document.createElement(&apos;meta&apos;);</span><br><span class="line"></span><br><span class="line">  // dpr</span><br><span class="line">  meta.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + 1/dpr + &apos;, maximum-scale=&apos; + 1/dpr + &apos;, minimum-scale=&apos; + 1/dpr + &apos;, user-scalable=no&apos;); </span><br><span class="line">  document.getElementsByTagName(&apos;head&apos;)[0].appendChild(meta);</span><br><span class="line"></span><br><span class="line">  // rem</span><br><span class="line">  document.addEventListener(&apos;DOMContentLoaded&apos;, function (e) &#123;</span><br><span class="line">    document.getElementsByTagName(&apos;html&apos;)[0].style.fontSize = window.innerWidth / 10 + &apos;px&apos;;</span><br><span class="line">  &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>为了防止全局变量污染或者覆盖他人的变量，请封装成模块再使用。</p></blockquote><h3 id="百分比与rem布局"><a href="#百分比与rem布局" class="headerlink" title="百分比与rem布局"></a>百分比与rem布局</h3><p><code>rem布局和百分比布局感觉差距不大啊，因为在写rem的时候是基于把宽度切为10份后再写的，就像是1rem = 10% = 10vw</code>一样。但是，如果出现盒子嵌套（这种场景太多了），那么百分比布局就出现问题了，因为其百分比的参考系选择的是父元素，所以我们如果在子盒子里面定义<code>10%</code>的宽度，指的是针对<code>父盒子</code>的而不是我们想要的针对整个<code>window.innerWidth</code>的<code>10%</code>。而<code>vw</code>的代码可维护性不如上述的这套方案，且兼容性也没有<code>rem</code>好（这一点差距不是太大）。</p><h3 id="CSS判断横屏竖屏"><a href="#CSS判断横屏竖屏" class="headerlink" title="CSS判断横屏竖屏"></a>CSS判断横屏竖屏</h3><p><strong>写在同一个CSS中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`@media ``screen` `and (orientation: ``portrait``) &#123;``  ``/*竖屏 css*/``&#125; ``@media ``screen` `and (orientation: ``landscape``) &#123;``  ``/*横屏 css*/``&#125;`</span><br></pre></td></tr></table></figure><p><strong>分开写在2个CSS中</strong><br>竖屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;``link` `rel``=``&quot;stylesheet&quot;` `media``=``&quot;all and (orientation:portrait)&quot;` `href``=``&quot;portrait.css&quot;``&gt;`</span><br></pre></td></tr></table></figure><p>横屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;``link` `rel``=``&quot;stylesheet&quot;` `media``=``&quot;all and (orientation:landscape)&quot;` `href``=``&quot;landscape.css&quot;``&gt;`</span><br></pre></td></tr></table></figure><h3 id="JS判断横屏竖屏"><a href="#JS判断横屏竖屏" class="headerlink" title="JS判断横屏竖屏"></a>JS判断横屏竖屏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`//判断手机横竖屏状态：``window.addEventListener(``&quot;onorientationchange&quot;` `in` `window ? ``&quot;orientationchange&quot;` `: ``&quot;resize&quot;``, ``function``() &#123;``        ``if` `(window.orientation === 180 || window.orientation === 0) &#123;``            ``alert(``&apos;竖屏状态！&apos;``);``        ``&#125;``        ``if` `(window.orientation === 90 || window.orientation === -90 )&#123;``            ``alert(``&apos;横屏状态！&apos;``);``        ``&#125; ``    ``&#125;, ``false``);``//移动端的浏览器一般都支持window.orientation这个参数，通过这个参数可以判断出手机是处在横屏还是竖屏状态。`</span><br></pre></td></tr></table></figure><h3 id="如下是其他解决方案"><a href="#如下是其他解决方案" class="headerlink" title="如下是其他解决方案"></a>如下是其他解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html</span><br><span class="line">https://www.cnblogs.com/noobfly/p/6207832.html</span><br><span class="line">http://caibaojian.com/mobile-responsive-example.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;视口-viewport&quot;&gt;&lt;a href=&quot;#视口-viewport&quot; class=&quot;headerlink&quot; title=&quot;视口 viewport&quot;&gt;&lt;/a&gt;视口 viewport&lt;/h3&gt;&lt;p&gt;meta viewport 标签首先是由苹果公司在其safari浏览
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/17/hello-world/"/>
    <id>http://yoursite.com/2019/06/17/hello-world/</id>
    <published>2019-06-17T09:02:37.008Z</published>
    <updated>2019-06-17T09:02:37.009Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
